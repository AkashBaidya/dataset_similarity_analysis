---
title: "geo_dataset_analysis"
format: html
editor: visual
---

## Quarto

## Dataset access with accession id


```{r}
# install.packages("GEOquery")
library(GEOquery)
datasets <- c("GSE50948", "GSE30543", "GSE50697", "GSE46924", "GSE31192", "GSE35696",
              "GSE35511", "GSE28645", "GSE33658", "GSE22865", "GSE32474", "GSE16179",
              "GSE32161", "GSE24249", "GSE27444", "GSE29327", "GSE28448", "GSE27515",
              "GSE22600", "GSE26298", "GSE27473", "GSE21422", "GSE28274", "GSE26910",
              "GSE27567", "GSE27018", "GSE19777", "GSE22035", "GSE26459", "GSE22513",
              "GSE15481", "GSE13477", "GSE11506", "GSE11352", "GSE11324", "GSE8565",
              "GSE10270", "GSE9586", "GSE6800", "GSE8597")


# Download each dataset separately
geo_data_list <- lapply(datasets, function(dataset) getGEO(dataset,GSEMatrix = TRUE))

```

## Table with summary of information
```{r}
# Extract phenotype data and store as tables
phenotype_tables <- lapply(geo_data_list, function(data) {
  pData_list <- pData(phenoData(data[[1]]))
  sapply(pData_list, table)
})
# phenotype_tables


```


```{r}
# Function to extract clinical variables from a GEO dataset
get_clinical_variables <- function(geo_data) {
  # Extract clinical variables
  clinical_data <- pData(phenoData(geo_data[[1]]))
  clinical_variables <- colnames(clinical_data)
  
  return(clinical_variables)
}

# Apply the function to each pre-downloaded dataset
clinical_variables_list <- lapply(geo_data_list, get_clinical_variables)

# Calculate the frequency of each clinical variable across datasets
clinical_variables_freq <- table(unlist(clinical_variables_list))

# Filter for variables measured in the majority of datasets (e.g., in at least 50% of datasets)
majority_variables <- names(clinical_variables_freq[clinical_variables_freq >= length(geo_data_list)/2])

# Print the identified clinical variables
print(majority_variables)


```


## Trying out some popular distance measure for datasets
```{r}
# Function to compute KL divergence between two datasets
kl_divergence <- function(dataset1, dataset2) {
  # Check if datasets have the same dimensions
  if (!all(dim(dataset1) == dim(dataset2))) {
    stop("Datasets must have the same dimensions.")
  }
  
  # Compute KL divergence for each pair of corresponding vectors
  kl_values <- sapply(1:ncol(dataset1), function(i) {
    kl_div <- sum(dataset1[, i] * log(dataset1[, i] / dataset2[, i]), na.rm = TRUE)
    return(kl_div)
  })
  
  # Aggregate KL divergence values
  kl_div <- mean(kl_values)
  
  return(kl_div)
}

euclidean_distance <- function(dataset1, dataset2) {
  sqrt(sum((dataset1 - dataset2)^2))
}

# Function to compute Manhattan distance between two datasets
manhattan_distance <- function(dataset1, dataset2) {
  sum(abs(dataset1 - dataset2))
}

# Function to compute correlation distance between two datasets
# correlation_distance <- function(dataset1, dataset2) {
#   1 - cor(dataset1, dataset2)
# }

# Generate two datasets
dataset1 <- generate_dataset(100, 7)
dataset2 <- generate_dataset(100, 7)

# Compute KL divergence



# Compute  distance
kl_distance <- kl_divergence(dataset1, dataset2)
distance <- euclidean_distance(dataset1, dataset2)
manhattan_dist <- manhattan_distance(dataset1, dataset2)
# correlation_dist <- correlation_distance(dataset1, dataset2)



# Print the distances
print(paste("Euclidean Distance:", distance))
print(paste("Manhattan Distance:", manhattan_dist))
# print(paste("Correlation Distance:", correlation_dist))
print(paste("kl divergence:", kl_distance))




```